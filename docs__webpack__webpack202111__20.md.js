(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[83],{w4Y5:function(n,t,e){"use strict";e.r(t);var a=e("q1tI"),o=e.n(a),s=e("dEAq"),l=e("H1Ra"),r=o.a.memo((n=>{n.demos;return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"markdown"},o.a.createElement("h1",{id:"\u5b9e\u73b0-asyncparallelhook"},o.a.createElement(s["AnchorLink"],{to:"#\u5b9e\u73b0-asyncparallelhook","aria-hidden":"true",tabIndex:-1},o.a.createElement("span",{className:"icon icon-link"})),"\u5b9e\u73b0 AsyncParallelHook"),o.a.createElement("p",null,"tapable/AsyncParallelHook.js"),o.a.createElement(l["a"],{code:"const Hook = require('./Hook')\nconst HookCodeFactory = require('./HookCodeFactory')\n\nclass AsyncParallelHookCodeFactory extends HookCodeFactory {\n  // \u83b7\u53d6\u4e8b\u4ef6\u51fd\u6570\u6267\u884c\u7684\u4ee3\u7801\u9700\u8981\u52a8\u6001\u7684\u521b\u5efa\n  content() {\n    return this.callTapsParallel()\n  }\n}\n\nconst factory = new AsyncParallelHookCodeFactory();\n\nclass AsyncParallelHook extends Hook {\n  compile(options) {\n    // \u5c31\u662f\u7ed9 hook._x \u8d4b\u503c\u4e3a\u4e8b\u4ef6\u51fd\u6570\u7684\u6570\u7ec4\n    factory.setup(this, options)\n    // \u5f00\u59cb\u6839\u636e options{taps, args, type} \u521b\u5efa call \u51fd\u6570 new Function\n    return factory.create(options)\n  }\n}\n\nmodule.exports = AsyncParallelHook",lang:"js"}),o.a.createElement("p",null,o.a.createElement("strong",null,"tapable/Hooks.js")),o.a.createElement(l["a"],{code:"class Hook {\n  constructor(args) {\n    // \u4e8b\u4ef6\u56de\u8c03\u53c2\u6570\u7684\u51fd\u6570\u5217\u8868\u6570\u7ec4\n    this.args = args;\n    // \u653e\u7f6e\u6240\u6709\u7684\u4e8b\u4ef6\u51fd\u6570\u5bf9\u8c61 [{ type: 'sync', fn, name: ''}]\n    this.taps = [];\n    this._x = null; // [fn]\n    this.call = CALL_DELEGATE;\n+    this.callAsync = CALL_ASYNC_DELEGATE;\n  }\n  tap(options, fn) {\n    this._tap('sync', options, fn);\n  }\n+  tapAsync(options, fn) {\n+    this._tap('async', options, fn);\n+  }\n  _tap(type, options, fn) {\n    if (typeof options === 'string') {\n      options = { name: options }\n    }\n    let tapInfo = {...options, type, fn};\n    this._insert(tapInfo)\n  }\n  _insert(tapInfo) {\n    this.taps.push(tapInfo);\n  }\n  compile() {\n    throw new Error('\u62bd\u8c61\u65b9\u6cd5\uff0c\u5fc5\u987b\u7531\u5b50\u7c7b\u53bb\u5b9e\u73b0')\n  }\n  _createCall(type) {\n    return this.compile({\n      taps: this.taps,  // \u4e8b\u4ef6\u51fd\u6570\n      args: this.args,  // \u53c2\u6570\n      type, // \u94a9\u5b50\u7c7b\u578b\n    })\n  }\n}\n\nconst CALL_DELEGATE = function (...args) {\n  this.call = this._createCall('sync');\n+  // this \u662f hook \u5b9e\u4f8b\uff0c\u6211\u7528 this \u8c03\u7528 call \u65b9\u6cd5\uff0ccall \u91cc\u9762\u7684 this \u80af\u5b9a\u662f\u6307\u5411 hook \u5b9e\u4f8b\u7684\n  return this.call(...args)\n}\n\n+ const CALL_ASYNC_DELEGATE = function (...args) {\n+   this.callAsync = this._createCall('async');\n+   return this.callAsync(...args)\n+ }\n\nmodule.exports = Hook",lang:"diff"}),o.a.createElement("p",null,o.a.createElement("strong",null,"tapable/HookCodeFactory.js")),o.a.createElement(l["a"],{code:"class HookCodeFactory {\n  setup(hook, options) {\n    // \u628a\u4e8b\u4ef6\u51fd\u6570\u5bf9\u8c61\u4e2d\u7684\u51fd\u6570\u53d6\u51fa\u6765\uff0c\u62fc\u6210\u4e00\u4e2a\u6570\u7ec4\u4f20\u9012\u7ed9 hook._x\n    hook._x = options.taps.map(tap => tap.fn)\n  }\n\n+  args(options = {}) {\n+    let { before, after } = options\n+    let allArgs = this.options.args;\n+    if (before) allArgs = [before, ...allArgs]\n+    if (after) allArgs = [...allArgs, after]\n+    return allArgs.join(',')\n+  }\n\n  init(options) {\n    this.options = options;\n  }\n\n  deInit() {\n    this.options = null;\n  }\n\n  header() {\n    let code = '';\n\n    code += `var _x = this._x \\n`;\n    return code;\n  }\n\n  /**\n   * \u52a8\u6001\u521b\u5efa\u51fd\u6570\n   * @param options\n   *  taps tapInfo \u6570\u7ec4\n   *  args \u53c2\u6570\u6570\u7ec4\n   *  type \u6ce8\u518c\u7c7b\u578b\n   */\n  create(options) {\n    this.init(options)\n    let { type } = options;\n    let fn;\n    switch (type) {\n      case 'sync':\n        fn = new Function(\n          this.args(),  // name, age\n          this.header() + this.content()\n        );\n        break;\n+      case 'async':\n+        fn = new Function(\n+          this.args({ after: '_callback' }),  // name, age\n+          this.header() + this.content()\n+        );\n+        break;\n      default:\n        break;\n    }\n    return fn;\n  }\n\n  callTapsSeries() {\n    let taps = this.options.taps;\n    if (taps.length === 0) {\n      return ''\n    }\n    let code = '';\n    for (let i = 0; i < taps.length; i++) {\n      let content = this.callTap(i);\n      code += content;\n    }\n    return code;\n  }\n\n+  callTapsParallel() {\n+    let taps = this.options.taps;\n+    let code = `var _counter = ${taps.length};\\n`\n+    code += `\n+      var _done = (function() {\n+        _callback();\n+      })\n+    `\n+\n+    for (let i = 0; i < taps.length; i++) {\n+      let content = this.callTap(i);\n+      code += content;\n+    }\n+    return code;\n+  }\n\n  callTap(tapIndex) {\n    let code = ''\n    code += `var _fn${tapIndex} = _x[${tapIndex}];`;\n\n    let tapInfo = this.options.taps[tapIndex]\n    switch (tapInfo.type) {\n      case 'sync':\n        code += `_fn${tapIndex}(${this.args()})\\n`;\n        break;\n+      case 'async':\n+        code += `\n+          _fn${tapIndex}(${this.args({\n+            after: `\n+              function() {\n+                if (--_counter === 0) _done();\n+              }\n+            `\n+          })});\n+        `\n+        break;\n      default:\n        break;\n    }\n    return code;\n  }\n}\n\nmodule.exports = HookCodeFactory",lang:"diff"})))}));t["default"]=n=>{var t=o.a.useContext(s["context"]),e=t.demos;return o.a.useEffect((()=>{var t;null!==n&&void 0!==n&&null!==(t=n.location)&&void 0!==t&&t.hash&&s["AnchorLink"].scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),o.a.createElement(r,{demos:e})}}}]);