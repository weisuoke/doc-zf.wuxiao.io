(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[54],{tORv:function(n,e,t){"use strict";t.r(e);var o=t("q1tI"),r=t.n(o),a=t("dEAq"),d=t("H1Ra"),s=r.a.memo((n=>{n.demos;return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"markdown"},r.a.createElement("h1",{id:"\u5b9e\u73b0react\u7c7b\u7ec4\u4ef6\u7684\u57fa\u672c\u751f\u547d\u5468\u671f"},r.a.createElement(a["AnchorLink"],{to:"#\u5b9e\u73b0react\u7c7b\u7ec4\u4ef6\u7684\u57fa\u672c\u751f\u547d\u5468\u671f","aria-hidden":"true",tabIndex:-1},r.a.createElement("span",{className:"icon icon-link"})),"\u5b9e\u73b0React\u7c7b\u7ec4\u4ef6\u7684\u57fa\u672c\u751f\u547d\u5468\u671f"),r.a.createElement("p",null,r.a.createElement("img",{src:"http://wuxiao-tech-doc.oss-cn-hangzhou.aliyuncs.com/2022-01-29-071031.jpg",alt:"react15_1626405471667.jpg"})),r.a.createElement("p",null,"src\\index.js"),r.a.createElement(d["a"],{code:"import React from './react';\nimport ReactDOM from './react-dom';\nclass Counter extends React.Component{ // \u4ed6\u4f1a\u6bd4\u8f83\u4e24\u4e2a\u72b6\u6001\u76f8\u7b49\u5c31\u4e0d\u4f1a\u5237\u65b0\u89c6\u56fe PureComponent\u662f\u6d45\u6bd4\u8f83\n    static defaultProps = {\n        name: '\u73e0\u5cf0\u67b6\u6784'\n    };\n    constructor(props) {\n        super(props);\n        this.state = { number: 0 }\n        console.log('Counter 1.constructor')\n    }\n    componentWillMount() { // \u53d6\u672c\u5730\u7684\u6570\u636e \u540c\u6b65\u7684\u65b9\u5f0f\uff1a\u91c7\u7528\u6e32\u67d3\u4e4b\u524d\u83b7\u53d6\u6570\u636e\uff0c\u53ea\u6e32\u67d3\u4e00\u6b21\n        console.log('Counter 2.componentWillMount');\n    }\n    componentDidMount() {\n        console.log('Counter 4.componentDidMount');\n    }\n    handleClick = () => {\n        this.setState({ number: this.state.number + 1 });\n    };\n    // react\u53ef\u4ee5shouldComponentUpdate\u65b9\u6cd5\u4e2d\u4f18\u5316 PureComponent \u53ef\u4ee5\u5e2e\u6211\u4eec\u505a\u8fd9\u4ef6\u4e8b\n    shouldComponentUpdate(nextProps, nextState) { // \u4ee3\u8868\u7684\u662f\u4e0b\u4e00\u6b21\u7684\u5c5e\u6027 \u548c \u4e0b\u4e00\u6b21\u7684\u72b6\u6001\n        console.log('Counter 5.shouldComponentUpdate');\n        return nextState.number % 2 === 0;\n        // return nextState.number!==this.state.number; //\u5982\u679c\u6b64\u51fd\u6570\u79cd\u8fd4\u56de\u4e86false \u5c31\u4e0d\u4f1a\u8c03\u7528render\u65b9\u6cd5\u4e86\n    } //\u4e0d\u8981\u968f\u4fbf\u7528setState \u53ef\u80fd\u4f1a\u6b7b\u5faa\u73af\n    componentWillUpdate() {\n        console.log('Counter 6.componentWillUpdate');\n    }\n    componentDidUpdate() {\n        console.log('Counter 7.componentDidUpdate');\n    }\n    render() {\n        console.log('Counter 3.render');\n        return (\n            <div>\n                <p>{this.state.number}</p>\n                <button onClick={this.handleClick}>+</button>\n            </div>\n        )\n    }\n}\nReactDOM.render(<Counter />, document.getElementById('root'));\n\n/**\nCounter 1.constructor\nCounter 2.componentWillMount\nCounter 3.render\nCounter 4.componentDidMount\n2 Counter 5.shouldComponentUpdate\nCounter 6.componentWillUpdate\nCounter 3.render\nCounter 7.componentDidUpdate\n2 Counter 5.shouldComponentUpdate\nCounter 6.componentWillUpdate\nCounter 3.render\nCounter 7.componentDidUpdate\n*/",lang:"js"}),r.a.createElement("p",null,"src\\Component.js"),r.a.createElement(d["a"],{code:"import { findDOM, compareTwoVdom } from './react-dom';\nexport let updateQueue = {\n    isBatchingUpdate:false,\n    updaters:[],\n    batchUpdate(){//\u6279\u91cf\u66f4\u65b0\n    updateQueue.isBatchingUpdate = false;\n      for(let updater of updateQueue.updaters){\n        updater.updateComponent();\n      }\n      updateQueue.updaters.length=0;\n    }\n}\nclass Updater {\n    constructor(classInstance) {\n        this.classInstance = classInstance;\n        this.pendingStates = [];\n        this.callbacks = [];\n    }\n    addState(partialState, callback) {\n        this.pendingStates.push(partialState);///\u7b49\u5f85\u66f4\u65b0\u7684\u6216\u8005\u8bf4\u7b49\u5f85\u751f\u6548\u7684\u72b6\u6001\n        if (typeof callback === 'function')\n            this.callbacks.push(callback);//\u72b6\u6001\u66f4\u65b0\u540e\u7684\u56de\u8c03\n        this.emitUpdate();\n    }\n    emitUpdate(nextProps) {\n        this.nextProps = nextProps;\n        if(updateQueue.isBatchingUpdate){\n            updateQueue.updaters.push(this);\n        }else{\n            this.updateComponent();\n        }\n    }\n    updateComponent() {\n        let { classInstance, pendingStates } = this;\n        if (this.nextProps || pendingStates.length > 0) {\n            shouldUpdate(classInstance,this.nextProps, this.getState());\n        }\n    }\n    getState() {\n        let { classInstance, pendingStates } = this;\n        let { state } = classInstance;\n        pendingStates.forEach((nextState) => {\n            if (typeof nextState === 'function') {\n                nextState = nextState(state);\n            }\n            state = { ...state, ...nextState };\n        });\n        pendingStates.length = 0;\n        return state;\n    }\n}\nfunction shouldUpdate(classInstance,nextProps, nextState) {\n+    let willUpdate = true;\n+    if(classInstance.shouldComponentUpdate\n+        &&!classInstance.shouldComponentUpdate(nextProps,nextState)){\n+            willUpdate = false;\n+    }\n+    if(willUpdate && classInstance.componentWillUpdate){\n+        classInstance.componentWillUpdate();\n+    }\n+    if(nextProps){\n+        classInstance.props = nextProps;\n+    }\n+    classInstance.state = nextState;\n+    if(willUpdate) classInstance.forceUpdate();\n}\nexport class Component {\n    static isReactComponent = true;\n    constructor(props) {\n        this.props = props;\n        this.state = {};\n        this.updater = new Updater(this);\n    }\n    setState(partialState, callback) {\n        this.updater.addState(partialState, callback);\n    }\n    forceUpdate() {\n        let oldRenderVdom = this.oldRenderVdom;\n        let oldDOM = findDOM(oldRenderVdom);\n        let newRenderVdom = this.render();\n        compareTwoVdom(oldDOM.parentNode, oldRenderVdom, newRenderVdom);\n        this.oldRenderVdom = newRenderVdom;\n+       if(this.componentDidUpdate){\n+           this.componentDidUpdate(this.props,this.state);\n+       }\n    }\n}",lang:"diff"}),r.a.createElement("p",null,"src\\react-dom.js"),r.a.createElement(d["a"],{code:"import {REACT_TEXT,REACT_FORWARD_REF_TYPE} from './constants';\nimport { addEvent } from './event';\n\nfunction render(vdom, parentDOM) {\n    let newDOM = createDOM(vdom)\n    if (newDOM) {\n        parentDOM.appendChild(newDOM);\n+       if (newDOM._componentDidMount) newDOM._componentDidMount();\n    }\n}\nexport function createDOM(vdom) {\n  let { type, props,ref } = vdom;\n  let dom;\n  if(type&&type.$$typeof===REACT_FORWARD_REF_TYPE){\n    return mountForwardComponent(vdom);\n  }else if (type === REACT_TEXT) {\n    dom = document.createTextNode(props);\n  } else if (typeof type === \"function\") {\n    if (type.isReactComponent) {\n      return mountClassComponent(vdom);\n    } else {\n      return mountFunctionComponent(vdom);\n    }\n  } else {\n    dom = document.createElement(type);\n  }\n  if (props) {\n    updateProps(dom, {}, props);\n    if (typeof props.children == \"object\" && props.children.type) {\n      mount(props.children, dom);\n    } else if (Array.isArray(props.children)) {\n      reconcileChildren(props.children, dom);\n    }\n  }\n  vdom.dom = dom;\n  if(ref) ref.current = dom;\n  return dom;\n}\nfunction mountForwardComponent(vdom){\n    let {type,props,ref} = vdom;\n    let renderVdom = type.render(props,ref);\n    vdom.oldRenderVdom = renderVdom;\n    return createDOM(renderVdom);\n}\nfunction mountClassComponent(vdom) {\n  let { type, props,ref } = vdom;\n  let classInstance = new type(props);\n+ if(ref) ref.current = classInstance;\n+ if (classInstance.componentWillMount) classInstance.componentWillMount();\n  let renderVdom = classInstance.render();\n  classInstance.oldRenderVdom = renderVdom;\n  let dom = createDOM(renderVdom);\n+ if (classInstance.componentDidMount)\n+   dom.componentDidMount = classInstance.componentDidMount.bind(classInstance);\n  return dom;\n}\nfunction mountFunctionComponent(vdom) {\n  let { type, props } = vdom;\n  let renderVdom = type(props);\n  vdom.oldRenderVdom = renderVdom;\n  return createDOM(renderVdom);\n}\nfunction updateProps(dom, oldProps={}, newProps={}) {\n    for (let key in newProps) {\n        if (key === 'children') {\n            continue;\n        } else if (key === 'style') {\n            let styleObj = newProps[key];\n            for (let attr in styleObj) {\n                dom.style[attr] = styleObj[attr];\n            }\n        } else if (key.startsWith('on')) {\n            addEvent(dom, key.toLocaleLowerCase(), newProps[key]);\n        } else {\n            dom[key] = newProps[key];\n        }\n    }\n    for(let key in oldProps){\n        if(!newProps.hasOwnProperty(key)){\n            dom[key] = null;\n        }\n    }\n}\nexport function findDOM(vdom){\n    let {type}= vdom;\n    let dom;\n    if(typeof type === 'function'){\n        dom=findDOM(vdom.oldRenderVdom);\n    }else{\n        dom=vdom.dom;\n    }\n    return dom;\n}\nexport function compareTwoVdom(parentDOM, oldVdom, newVdom) {\n    let oldDOM = findDOM(oldVdom);\n    let newDOM = createDOM(newVdom);\n    parentDOM.replaceChild(newDOM, oldDOM);\n}\nfunction reconcileChildren(childrenVdom, parentDOM) {\n  for (let i = 0; i < childrenVdom.length; i++) {\n    let childVdom = childrenVdom[i];\n    mount(childVdom, parentDOM);\n  }\n}\nconst ReactDOM = {\n  render,\n};\nexport default ReactDOM;",lang:"diff"})))}));e["default"]=n=>{var e=r.a.useContext(a["context"]),t=e.demos;return r.a.useEffect((()=>{var e;null!==n&&void 0!==n&&null!==(e=n.location)&&void 0!==e&&e.hash&&a["AnchorLink"].scrollToAnchor(decodeURIComponent(n.location.hash.slice(1)))}),[]),r.a.createElement(s,{demos:t})}}}]);